---
# Source: retriever-usvc/templates/configmap.yaml
# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: ConfigMap
metadata:
  name: config-{endpoint}
data:
  HEALTHCHECK_ENDPOINT: "{tei_endpoint}:{tei_port}"
  TEI_EMBEDDING_ENDPOINT: "http://{tei_endpoint}:{tei_port}"
  EMBED_MODEL: ""
  REDIS_URL: "redis://{redis_vector_store_endpoint}:{redis_vector_store_port}"
  INDEX_NAME: "rag-redis"
  EASYOCR_MODULE_PATH: "/tmp/.EasyOCR"
  http_proxy: ""
  https_proxy: ""
  no_proxy: ""
  HF_HOME: "/tmp/.cache/huggingface"
  HUGGINGFACEHUB_API_TOKEN: "{huggingFaceToken}"
  LOGFLAG: "True"
  RETRIEVER_COMPONENT_NAME: "OPEA_RETRIEVER_REDIS"
---
# Source: retriever-usvc/templates/service.yaml
# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: Service
metadata:
  name: "{endpoint}"
spec:
  type: ClusterIP
  ports:
    - port: "{port}"
      targetPort: 7000
      protocol: TCP
      name: "{endpoint}"
  selector:
    app: "{endpoint}"
---
# Source: retriever-usvc/templates/deployment.yaml
# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{endpoint}"
  labels:
    app: "{endpoint}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{endpoint}"
  template:
    metadata:
      labels:
        app: "{endpoint}"
    spec:
      securityContext:
        {}
      initContainers:
        - name: wait-for-remote-service
          image: busybox
          command: ['sh', '-c', 'until nc -z -v -w30 $HEALTHCHECK_ENDPOINT 80; do echo "Waiting for remote service..."; sleep 5; done']
          envFrom:
            - configMapRef:
                name: config-{endpoint}
      containers:
        - name: retriever-usvc
          command: ["/bin/sh", "-c"]
          args:
          - sed '/^from integrations/ { /from integrations.redis import OpeaRedisRetriever/! s/^/#/ }' opea_retrievers_microservice.py > /tmp/tmp_opea_retrievers_microservice.py && python /tmp/tmp_opea_retrievers_microservice.py
          envFrom:
            - configMapRef:
                name: config-{endpoint}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          image: "${REGISTRY}/retriever:${TAG}"
          imagePullPolicy: Always
          ports:
            - name: retriever-usvc
              containerPort: 7000
              protocol: TCP
          volumeMounts:
            - mountPath: /tmp
              name: tmp
          livenessProbe:
            failureThreshold: 24
            httpGet:
              path: v1/health_check
              port: retriever-usvc
            initialDelaySeconds: 5
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: v1/health_check
              port: retriever-usvc
            initialDelaySeconds: 5
            periodSeconds: 5
          startupProbe:
            failureThreshold: 120
            httpGet:
              path: v1/health_check
              port: retriever-usvc
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {}
      volumes:
        - name: tmp
          emptyDir: {}
