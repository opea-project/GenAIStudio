- name: Update Docker daemon configuration on all hosts and run Docker registry on localhost
  hosts: all
  become: yes
  become_method: sudo
  become_user: root
  vars_files:
    - ../vars.yml
  tasks:
    - name: Ensure /etc/docker/daemon.json exists
      copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver" : "json-file",
            "log-opts": {
              "max-size" : "100m"
            },
            "storage-driver": "overlay2".
            "insecure-registries": [
              "{{ groups['k8_master'][0] }}:5000"
            ]
          }

  handlers:
    - name: Reload Docker daemon
      command: systemctl daemon-reload

    - name: Restart Docker service
      service:
        name: docker
        state: restarted

- name: Run Docker registry on localhost
  hosts: localhost
  become: yes
  become_method: sudo
  become_user: root
  vars_files:
    - ../vars.yml
  tasks:
    - name: Install pip3 if not present
      apt:
        name: python3-pip
        state: present
        update_cache: yes
      environment:
        http_proxy: "{{ http_proxy }}"
        https_proxy: "{{ http_proxy }}"
        no_proxy: "{{ no_proxy }}"

    - name: Install Docker SDK for Python
      pip:
        name: docker
        executable: pip3
        state: present
      environment:
        http_proxy: "{{ http_proxy }}"
        https_proxy: "{{ http_proxy }}"
        no_proxy: "{{ no_proxy }}"
    
    - name: Ensure /var/lib/registry directory exists
      file:
        path: /var/lib/registry
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Run Docker registry container
      docker_container:
        name: registry
        image: registry:2
        state: started
        restart_policy: always
        ports:
          - "5000:5000"
        volumes:
          - ../registry:/etc/docker/registry/
          - /var/lib/registry:/var/lib/registry
        container_default_behavior: "compatibility"
    
    - name: Ensure /etc/systemd/system/containerd.service.d directory exists
      file:
        path: /etc/systemd/system/containerd.service.d
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Create /etc/systemd/system/containerd.service.d/http-proxy.conf
      copy:
        dest: /etc/systemd/system/containerd.service.d/http-proxy.conf
        content: |
          [Service]
          Environment="HTTP_PROXY={{ http_proxy }}"
          Environment="HTTPS_PROXY={{ http_proxy }}"
          Environment="NO_PROXY={{ no_proxy }}"
      notify:
        - Reload systemd daemon

    - name: Create /etc/containerd/config.toml
      copy:
        dest: /etc/containerd/config.toml
        content: |
          version = 2
          root = "/var/lib/containerd"
          state = "/run/containerd"
          oom_score = 0

          [grpc]
            max_recv_message_size = 16777216
            max_send_message_size = 16777216

          [debug]
            level = "info"

          [metrics]
            address = ""
            grpc_histogram = false

          [plugins]
              [plugins."io.containerd.grpc.v1.cri".registry]
                [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
                  [plugins."io.containerd.grpc.v1.cri".registry.mirrors."{{ groups['k8_master'][0] }}:5000"]
                    endpoint = ["http://{{ groups['k8_master'][0] }}:5000"]
      notify:
        - Restart containerd service

  handlers:
    - name: Reload systemd daemon
      command: systemctl daemon-reload

    - name: Restart containerd service
      service:
        name: containerd
        state: restarted
